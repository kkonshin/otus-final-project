<?php

namespace App\Containers\TelegramContainer\UI\API\Controllers;

use App\Containers\Core\Exceptions\ServiceUnavailableException;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Telegram\Bot\Exceptions\TelegramSDKException;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;
use Telegram\Bot\Objects\CallbackQuery;
use Telegram\Bot\Objects\EditedMessage;
use Telegram\Bot\Objects\Message;

/**
 * @method handleEditedMessage(EditedMessage|null $editedMessage)
 */
class TelegramController extends Controller
{
    public function webhook(): JsonResponse
    {
        try {
            $update = Telegram::getWebhookUpdate();

            // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            $updateType = $update->objectType();

            // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            if (
                $updateType === 'message'
                && $update->message->has('text')
                && str_starts_with($update->message->text, '/')
            ) {
                Telegram::commandsHandler(true);

                return response()->json([
                    'status' => 'command_handled',
                ]);
            }

            // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
            if ($updateType === 'callback_query') {
                $this->handleCallbackQuery($update->callbackQuery);

                return response()->json([
                    'status' => 'callback_handled',
                ]);
            }

            // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            switch ($updateType) {
                case 'message':
                    $this->handleMessage($update->message);
                    break;
                case 'edited_message':
                    $this->handleEditedMessage($update->editedMessage);
                    break;
            }

            return response()->json([
                'status' => 'success',
            ]);

        } catch (\Exception $e) {
            report($e);
            return response()->json([
                'status' => 'error',
                'message' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * @param CallbackQuery $callbackQuery
     * @return void
     * @throws TelegramSDKException
     */
    protected function handleCallbackQuery(CallbackQuery $callbackQuery): void
    {
        $data = $callbackQuery->data;
        $chatId = $callbackQuery->message->chat->id;
        $messageId = $callbackQuery->message->message_id;

        // –û—Ç–≤–µ—Ç –Ω–∞ callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏")
        Telegram::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->id
        ]);

        if (str_starts_with($data, 'room_list_page_')) {
            $page = (int) str_replace('room_list_page_', '', $data);
            $this->processRoomListCommand($callbackQuery->message->chat->id, $page);
            return;
        }

        if ($data === 'room_list') {
            // –í–º–µ—Å—Ç–æ triggerCommand –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            $this->processRoomListCommand($chatId, $messageId);
            return;
        }

        // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback...
    }

    protected function processRoomListCommand($chatId, $messageId = null)
    {
        // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π Update –æ–±—ä–µ–∫—Ç
        $update = new \Telegram\Bot\Objects\Update([
            'update_id' => time(),
            'message' => [
                'message_id' => $messageId ?? time(),
                'chat' => ['id' => $chatId],
                'text' => '/rooms',
                'entities' => [
                    [
                        'type' => 'bot_command',
                        'offset' => 0,
                        'length' => 6
                    ]
                ]
            ]
        ]);

        // –ü–æ–ª—É—á–∞–µ–º CommandBus –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        $commandBus = Telegram::bot('bindroom_bot')->getCommandBus();
        $commandBus->execute('rooms', $update);
    }

    protected function showRoomDetails($chatId, $roomId, $messageId = null)
    {
//        $room = MeetingRoom::findOrFail($roomId);
        $room = [
            'id' => $roomId,
            'name' => '–ö–æ–º–Ω–∞—Ç–∞ 1',
            'location' => '–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 123',
            'description' => '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤',
            'capacity' => 20,
        ];

        $equipment = implode(', ', $room['equipment'] ?? []);
        $photos = $room['photos'] ?? [];

        $text = "üè¢ <b>{$room['name']}</b>\n\n"
            . "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {$room['location']}\n"
            . "üë• <b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {$room['capacity']} —á–µ–ª.\n"
            . "üõ† <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {$equipment}\n\n"
            . "{$room['description']}";

        $keyboard = Keyboard::make()->inline();
        $keyboard->row([
            Keyboard::inlineButton([
                'text' => 'üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å',
                'callback_data' => "book_room_{$room['id']}"
            ]),
            Keyboard::inlineButton([
                'text' => 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
                'callback_data' => 'room_list'
            ])
        ]);

        $params = [
            'chat_id' => $chatId,
            'text' => $text,
            'reply_markup' => $keyboard,
            'parse_mode' => 'HTML'
        ];

        if ($messageId) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $params['message_id'] = $messageId;
            Telegram::editMessageText($params);
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            Telegram::sendMessage($params);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($photos)) {
            $this->sendRoomPhotos($chatId, $photos);
        }
    }

    /**
     * @param $chatId
     * @param $photos
     * @return void
     * @throws TelegramSDKException
     */
    protected function sendRoomPhotos($chatId, $photos): void
    {
        $media = [];
        foreach ($photos as $index => $photo) {
            $media[] = [
                'type' => 'photo',
                'media' => $photo,
                'caption' => $index === 0 ? '–§–æ—Ç–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã' : null
            ];
        }

        Telegram::sendMediaGroup([
            'chat_id' => $chatId,
            'media' => json_encode($media)
        ]);
    }

    /**
     * @param Message $message
     * @return void
     */
    protected function handleMessage(Message $message): void
    {
        $chatId = $message->chat->id;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
        if ($message->has('text') && !str_starts_with($message->text, '/')) {
            $this->processTextMessage($chatId, $message->text);
        }

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     *
     * @param Request $request
     * @return JsonResponse
     * @throws ServiceUnavailableException
     */
    public function sendMessage(Request $request): JsonResponse
    {
        try {
            $response = Telegram::sendMessage([
                'chat_id' => $request->get('chat_id', 887374379),
                'text' => $request->get('message', 'Test')
            ]);

            return response()->json([
                'success' => true,
                'data' => [
                    'user' => $response->toArray()
                ],
            ]);
        } catch (\Throwable $e) {
            report($e);
            throw new ServiceUnavailableException();
        }
    }
}
