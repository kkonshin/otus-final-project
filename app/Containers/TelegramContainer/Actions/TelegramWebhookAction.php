<?php

declare(strict_types=1);

namespace App\Containers\TelegramContainer\Actions;

use App\Containers\RoomBookingContainer\Models\Room;
use App\Containers\TelegramContainer\Contracts\TelegramWebhookActionContract;
use Telegram\Bot\Exceptions\TelegramSDKException;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;
use Telegram\Bot\Objects\CallbackQuery;
use Throwable;

final class TelegramWebhookAction implements TelegramWebhookActionContract
{
    /**
     * @return void
     * @throws TelegramSDKException
     */
    public function execute(): void
    {
        $update = Telegram::getWebhookUpdate();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ objectType()
        $updateType = $update->objectType();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
        if ($updateType === 'callback_query') {
            $this->handleCallbackQuery($update->callbackQuery);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (
            $updateType === 'message'
            && $update->message->has('text')
            && str_starts_with($update->message->text, '/')
        ) {
            Telegram::commandsHandler(true);
        }
    }

    /**
     * @param CallbackQuery $callbackQuery
     * @return void
     * @throws TelegramSDKException
     */
    protected function handleCallbackQuery(CallbackQuery $callbackQuery): void
    {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback (—ç—Ç–æ –≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã)
        Telegram::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->id,
            'text' => '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å ...'
        ]);

        $data = $callbackQuery->data;
        $chatId = $callbackQuery->message->chat->id;
        $messageId = $callbackQuery->message->messageId;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–≥–∞—è)
        dispatch(function() use ($data, $chatId, $messageId) {
            try {
                switch ($data) {
                    case 'room_list':
                        $this->executeRoomListCommand($chatId);
                        break;
                    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
                }
            } catch (Throwable $e) {
                report($e);
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞'
                ]);
            }
        });
    }

    /**
     * @param $chatId
     * @return void
     * @throws TelegramSDKException
     */
    protected function executeRoomListCommand($chatId): void
    {
        try {
            $rooms = Room::query()->get();

            $keyboard = Keyboard::make()->inline();

            $rooms->each(function ($room) use ($keyboard) {
                $keyboard->row([
                    Keyboard::inlineButton([
                        'text' => "üè¢ $room->title",
                        'callback_data' => "room_detail_$room->id"
                    ])
                ]);
            });

            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:',
                'reply_markup' => $keyboard
            ]);
        } catch (Throwable $e) {
            report($e);
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç'
            ]);
        }
    }
}
